/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.Sindicalizado;
import Controller.Util;
import DAO.Conexao_banco;
import DAO.Dados_Sindicalizado_Pessoais_DAO;
import DAO.Dados_Sindicalizado_Rurais_DAO;
import DAO.Util_DAO;
import Model.Dados_Rurais;
import Model.Dados_Pessoais;
import java.awt.Dimension;
import java.sql.Connection;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.awt.event.KeyEvent;
import java.util.HashMap;

import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author helde
 */
public class Cadastrar_Sindi extends javax.swing.JInternalFrame {

    Dados_Pessoais dadosp;
    Dados_Rurais pr;
    Sindicalizado si = new Sindicalizado();
    Dados_Sindicalizado_Pessoais_DAO DADOSP = new Dados_Sindicalizado_Pessoais_DAO();
    Dados_Sindicalizado_Rurais_DAO DADOSR = new Dados_Sindicalizado_Rurais_DAO();
    Dados_Pessoais se = new Dados_Pessoais();
    Connection conexao = null;

    DateFormat df = DateFormat.getDateInstance();

    public String status = "", conf = "";
    protected int id_sindicalizado = 0, idade, erro = 0, totalFazenda = 0, linhaSelecionada, id_propriedade_rural = 0, totalLinhasTabela = 0, IDADE, ID = 0;
    protected boolean CONT = false, validacao = false, clicoTabela = false;
    protected String status2 = "";

    ArrayList<Dados_Rurais> RURAL = new ArrayList<>();
    ArrayList<Dados_Rurais> ADICIONA_RURAL = new ArrayList<>();
    ArrayList<Dados_Rurais> ADD = new ArrayList<>();

    public Cadastrar_Sindi() {
        initComponents();
        conexao = Conexao_banco.conector();

        try {
            UIManager.setLookAndFeel("com.jtattoo.plaf.aluminium.AluminiumLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Cadastrar_Sindi.class.getName()).log(Level.SEVERE, null, ex);
        }

        validaNumerosLetras();
        listar_Tabela_Sind();

        TABELA_PROPRIEDADE_RURAL.getTableHeader().setReorderingAllowed(false);      // BLOQUIA AS COLUNAS DA TABELA PARA NÃO MOVELAS DO LUGAR
        TABELA_SIND.getTableHeader().setReorderingAllowed(false);      // BLOQUIA AS COLUNAS DA TABELA PARA NÃO MOVELAS DO LUGAR
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        FORM_GUIAS = new javax.swing.JTabbedPane();
        PESQUISAR_SIND = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        NOME_Pesquisar = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        CPF_Pesquisar = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        RG_Pesquisa = new javax.swing.JFormattedTextField();
        BOTAO_PESQUISAR_ = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TABELA_SIND = new javax.swing.JTable();
        DADOS_PESSOAIS_SIND = new javax.swing.JPanel();
        jLabel75 = new javax.swing.JLabel();
        NOME = new javax.swing.JTextField();
        jLabel76 = new javax.swing.JLabel();
        jLabel77 = new javax.swing.JLabel();
        jLabel78 = new javax.swing.JLabel();
        jLabel81 = new javax.swing.JLabel();
        ESTADOCIVI = new javax.swing.JComboBox<>();
        jLabel90 = new javax.swing.JLabel();
        CELULAR = new javax.swing.JFormattedTextField();
        jLabel92 = new javax.swing.JLabel();
        NASCIONALIDADE = new javax.swing.JTextField();
        jLabel91 = new javax.swing.JLabel();
        jLabel89 = new javax.swing.JLabel();
        jLabel98 = new javax.swing.JLabel();
        CPF = new javax.swing.JFormattedTextField();
        jLabel80 = new javax.swing.JLabel();
        jLabel83 = new javax.swing.JLabel();
        RG = new javax.swing.JFormattedTextField();
        jLabel82 = new javax.swing.JLabel();
        RESERVISTA = new javax.swing.JFormattedTextField();
        jLabel96 = new javax.swing.JLabel();
        jLabel97 = new javax.swing.JLabel();
        CATEGORIA = new javax.swing.JTextField();
        jLabel93 = new javax.swing.JLabel();
        TITULO_ELEITO = new javax.swing.JFormattedTextField();
        jLabel94 = new javax.swing.JLabel();
        ZONA = new javax.swing.JFormattedTextField();
        jLabel95 = new javax.swing.JLabel();
        SECAO = new javax.swing.JFormattedTextField();
        jPanel12 = new javax.swing.JPanel();
        jLabel84 = new javax.swing.JLabel();
        PAI = new javax.swing.JTextField();
        MAE = new javax.swing.JTextField();
        jLabel85 = new javax.swing.JLabel();
        jLabel86 = new javax.swing.JLabel();
        jLabel87 = new javax.swing.JLabel();
        jLabel88 = new javax.swing.JLabel();
        jLabel79 = new javax.swing.JLabel();
        TOTAO_REFAZER_P = new javax.swing.JLabel();
        BOTAO_AVANCAR_ = new javax.swing.JLabel();
        CANCELAR = new javax.swing.JLabel();
        DATAEXPE = new com.toedter.calendar.JDateChooser();
        NASCIMENTO = new com.toedter.calendar.JDateChooser();
        DADOS_RURAIS_SIND = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TABELA_PROPRIEDADE_RURAL = new javax.swing.JTable();
        jLabel45 = new javax.swing.JLabel();
        NOMEFAZENDA = new javax.swing.JTextField();
        jLabel67 = new javax.swing.JLabel();
        AREAFAZENDA = new javax.swing.JTextField();
        jLabel62 = new javax.swing.JLabel();
        jLabel70 = new javax.swing.JLabel();
        LOGRADOURO = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        jLabel68 = new javax.swing.JLabel();
        TEMPOCOMPRA = new javax.swing.JTextField();
        jLabel71 = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        CODINCRA = new javax.swing.JFormattedTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        OUTRASATIVI = new javax.swing.JTextPane();
        jLabel64 = new javax.swing.JLabel();
        ADICONAR_FAZENDA_ = new javax.swing.JLabel();
        RESIDEN_ATUAL = new javax.swing.JTextField();
        jLabel74 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        Numero_NIRF = new javax.swing.JFormattedTextField();
        jLabel59 = new javax.swing.JLabel();
        MUNICEDE = new javax.swing.JTextField();
        jLabel69 = new javax.swing.JLabel();
        BOTAO_VOLTAR_ = new javax.swing.JLabel();
        BOTAO_REFAZER_ = new javax.swing.JLabel();
        BOTAO_SALVAR_ = new javax.swing.JLabel();
        VOLTAR1_ = new javax.swing.JLabel();

        jToggleButton1.setText("jToggleButton1");

        jLabel1.setText("jLabel1");

        setClosable(true);
        setIconifiable(true);

        jLabel3.setText("Nome:");

        NOME_Pesquisar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NOME_PesquisarMouseClicked(evt);
            }
        });
        NOME_Pesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NOME_PesquisarActionPerformed(evt);
            }
        });
        NOME_Pesquisar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                NOME_PesquisarKeyPressed(evt);
            }
        });

        jLabel5.setText("CPF:");

        try {
            CPF_Pesquisar.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.### - ##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        CPF_Pesquisar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CPF_PesquisarKeyPressed(evt);
            }
        });

        jLabel4.setText("RG:");

        try {
            RG_Pesquisa.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#######")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        RG_Pesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RG_PesquisaActionPerformed(evt);
            }
        });
        RG_Pesquisa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                RG_PesquisaKeyPressed(evt);
            }
        });

        BOTAO_PESQUISAR_.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/pesquisar.png"))); // NOI18N
        BOTAO_PESQUISAR_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BOTAO_PESQUISAR_ActionPerformed(evt);
            }
        });

        TABELA_SIND.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Data de nascimento", "Telefone", "Nascionalidade", "Estado civil", "CPF", "RG", "Data de Expedição", "Titulo de Eleitor", "Zona", "Seção", "Reservistal", "Categoria", "Nome do pai", "Nome da mãe"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TABELA_SIND.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TABELA_SINDMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                TABELA_SINDMouseEntered(evt);
            }
        });
        jScrollPane2.setViewportView(TABELA_SIND);

        javax.swing.GroupLayout PESQUISAR_SINDLayout = new javax.swing.GroupLayout(PESQUISAR_SIND);
        PESQUISAR_SIND.setLayout(PESQUISAR_SINDLayout);
        PESQUISAR_SINDLayout.setHorizontalGroup(
            PESQUISAR_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PESQUISAR_SINDLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PESQUISAR_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PESQUISAR_SINDLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(9, 9, 9)
                        .addComponent(NOME_Pesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(127, 127, 127)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CPF_Pesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(143, 143, 143)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RG_Pesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 72, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BOTAO_PESQUISAR_, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        PESQUISAR_SINDLayout.setVerticalGroup(
            PESQUISAR_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PESQUISAR_SINDLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PESQUISAR_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(NOME_Pesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PESQUISAR_SINDLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(PESQUISAR_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BOTAO_PESQUISAR_)
                            .addGroup(PESQUISAR_SINDLayout.createSequentialGroup()
                                .addGroup(PESQUISAR_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PESQUISAR_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel5)
                                        .addComponent(CPF_Pesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel4)
                                    .addComponent(RG_Pesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        FORM_GUIAS.addTab("PESQUISAR  SINDICALIZADO", PESQUISAR_SIND);

        jLabel75.setText("Nome:");

        jLabel76.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel76.setForeground(new java.awt.Color(255, 0, 0));
        jLabel76.setText("*");

        jLabel77.setText("Data de nascimento:");

        jLabel78.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel78.setForeground(new java.awt.Color(255, 0, 0));
        jLabel78.setText("*");

        jLabel81.setText("Estado civil:");

        ESTADOCIVI.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Casado", "Solteiro", "Viúvo", "Divorciado", " " }));

        jLabel90.setText("Celular:");

        try {
            CELULAR.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##) 9#### - ####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        CELULAR.setToolTipText("");
        CELULAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CELULARActionPerformed(evt);
            }
        });

        jLabel92.setText("Nascionalidade:");

        NASCIONALIDADE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NASCIONALIDADEActionPerformed(evt);
            }
        });

        jLabel91.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel91.setForeground(new java.awt.Color(255, 0, 0));
        jLabel91.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel91.setText("*");
        jLabel91.setIconTextGap(8);

        jLabel89.setText("Data de expedição:");

        jLabel98.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel98.setForeground(new java.awt.Color(255, 0, 0));
        jLabel98.setText("*");

        try {
            CPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.### - ##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel80.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel80.setForeground(new java.awt.Color(255, 0, 0));
        jLabel80.setText("*");

        jLabel83.setText("RG:");

        try {
            RG.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#######")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        RG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RGActionPerformed(evt);
            }
        });

        jLabel82.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel82.setForeground(new java.awt.Color(255, 0, 0));
        jLabel82.setText("*");
        jLabel82.setPreferredSize(new java.awt.Dimension(13, 30));

        try {
            RESERVISTA.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("######")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel96.setText("Reservista:");

        jLabel97.setText("Categoria:");

        jLabel93.setText("Titulo de eleitor:");

        try {
            TITULO_ELEITO.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#### #### ####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel94.setText("Zona:");

        try {
            ZONA.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel95.setText("Seção:");

        try {
            SECAO.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        SECAO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SECAOActionPerformed(evt);
            }
        });

        jPanel12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel84.setText("Pai:");

        PAI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                PAIMouseEntered(evt);
            }
        });

        MAE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                MAEMouseEntered(evt);
            }
        });

        jLabel85.setText("Mãe:");

        jLabel86.setText("FILIAÇÃO:");

        jLabel87.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel87.setForeground(new java.awt.Color(255, 0, 0));
        jLabel87.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel87.setText("*");
        jLabel87.setIconTextGap(8);
        jLabel87.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        jLabel88.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel88.setForeground(new java.awt.Color(255, 0, 0));
        jLabel88.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel88.setText("*");
        jLabel88.setIconTextGap(8);
        jLabel88.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel86)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(jLabel84)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PAI, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jLabel87)
                .addGap(26, 26, 26)
                .addComponent(jLabel85)
                .addGap(4, 4, 4)
                .addComponent(MAE, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jLabel88)
                .addGap(4, 4, 4))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel88)
                    .addComponent(jLabel87)
                    .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(PAI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel84)
                        .addComponent(jLabel85)
                        .addComponent(MAE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel86)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel79.setText("CPF:");

        TOTAO_REFAZER_P.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/atualizaz.png"))); // NOI18N
        TOTAO_REFAZER_P.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TOTAO_REFAZER_PMouseClicked(evt);
            }
        });

        BOTAO_AVANCAR_.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/proximo.png"))); // NOI18N
        BOTAO_AVANCAR_.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BOTAO_AVANCAR_MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BOTAO_AVANCAR_MouseEntered(evt);
            }
        });

        CANCELAR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/voltar.png"))); // NOI18N
        CANCELAR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CANCELARMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout DADOS_PESSOAIS_SINDLayout = new javax.swing.GroupLayout(DADOS_PESSOAIS_SIND);
        DADOS_PESSOAIS_SIND.setLayout(DADOS_PESSOAIS_SINDLayout);
        DADOS_PESSOAIS_SINDLayout.setHorizontalGroup(
            DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                        .addGroup(DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                                .addComponent(jLabel92)
                                .addGap(6, 6, 6)
                                .addComponent(NASCIONALIDADE, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(jLabel91))
                            .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                                .addComponent(jLabel96)
                                .addGap(3, 3, 3)
                                .addComponent(RESERVISTA, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(34, 34, 34)
                        .addGroup(DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                                .addGap(255, 255, 255)
                                .addGroup(DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                                        .addComponent(jLabel83)
                                        .addGap(4, 4, 4)
                                        .addComponent(RG, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(3, 3, 3)
                                        .addComponent(jLabel82, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                                        .addComponent(jLabel81)
                                        .addGap(3, 3, 3)
                                        .addComponent(ESTADOCIVI, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                                                .addGap(95, 95, 95)
                                                .addComponent(DATAEXPE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(4, 4, 4)
                                                .addComponent(jLabel98))
                                            .addComponent(jLabel89)))
                                    .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                                        .addGap(45, 45, 45)
                                        .addComponent(jLabel90)
                                        .addGap(3, 3, 3)
                                        .addComponent(CELULAR, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                                .addGroup(DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                                        .addComponent(jLabel79)
                                        .addGap(6, 6, 6)
                                        .addComponent(CPF, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(2, 2, 2)
                                        .addComponent(jLabel80))
                                    .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                                        .addComponent(jLabel97)
                                        .addGap(9, 9, 9)
                                        .addComponent(CATEGORIA, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(49, 49, 49)
                                .addComponent(jLabel93)
                                .addGap(4, 4, 4)
                                .addComponent(TITULO_ELEITO, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(jLabel94)
                                .addGap(4, 4, 4)
                                .addComponent(ZONA, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addGroup(DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                                        .addComponent(TOTAO_REFAZER_P)
                                        .addGap(18, 18, 18)
                                        .addComponent(BOTAO_AVANCAR_))
                                    .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                                        .addComponent(jLabel95)
                                        .addGap(6, 6, 6)
                                        .addComponent(SECAO, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addComponent(CANCELAR, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                        .addComponent(jLabel75)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NOME, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jLabel76)
                        .addGap(32, 32, 32)
                        .addComponent(jLabel77)
                        .addGap(2, 2, 2)
                        .addComponent(NASCIMENTO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jLabel78)))
                .addGap(32, 32, 32))
        );
        DADOS_PESSOAIS_SINDLayout.setVerticalGroup(
            DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                .addComponent(CANCELAR, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel76)
                    .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel81))
                    .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel75)
                            .addComponent(NOME, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(CELULAR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel90))
                    .addComponent(ESTADOCIVI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(NASCIMENTO, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel77)
                            .addComponent(jLabel78, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addGap(48, 48, 48)
                .addGroup(DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                        .addGroup(DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(RG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addComponent(jLabel83)))
                                .addGap(58, 58, 58))
                            .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                                .addGroup(DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                                            .addGroup(DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(CPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                                                    .addGap(2, 2, 2)
                                                    .addComponent(jLabel79)))
                                            .addGap(11, 11, 11))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel80)
                                            .addComponent(jLabel82, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addComponent(jLabel92)
                                    .addComponent(NASCIONALIDADE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addComponent(jLabel91, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(47, 47, 47)))
                        .addGroup(DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RESERVISTA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel97)
                            .addComponent(CATEGORIA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TITULO_ELEITO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ZONA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SECAO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel96)
                                    .addComponent(jLabel93)
                                    .addComponent(jLabel94)
                                    .addComponent(jLabel95)))))
                    .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                        .addGroup(DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DATAEXPE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel98)
                            .addComponent(jLabel89))
                        .addGap(86, 86, 86)))
                .addGroup(DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(DADOS_PESSOAIS_SINDLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(DADOS_PESSOAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(TOTAO_REFAZER_P, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BOTAO_AVANCAR_))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        FORM_GUIAS.addTab("DADOS PESSOAIS", DADOS_PESSOAIS_SIND);

        TABELA_PROPRIEDADE_RURAL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Número de identificação (ID)", "Nome da propriedade", "Área da propriedade", "Município cede", "Tempo de compra da propriedade", "Logradouro", "Número do Imóvel no NIRF", "Número do imóvel no INCRA", "Residência atual", "Outras atividades"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TABELA_PROPRIEDADE_RURAL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TABELA_PROPRIEDADE_RURALMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TABELA_PROPRIEDADE_RURAL);

        jLabel45.setText("Nome da propriedade rural:");

        jLabel67.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel67.setForeground(new java.awt.Color(255, 0, 0));
        jLabel67.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel67.setText("*");
        jLabel67.setIconTextGap(8);
        jLabel67.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        jLabel62.setText("Area da prorpiedade:");

        jLabel70.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel70.setForeground(new java.awt.Color(255, 0, 0));
        jLabel70.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel70.setText("*");
        jLabel70.setIconTextGap(8);
        jLabel70.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        jLabel46.setText("Logradouro:");

        jLabel68.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel68.setForeground(new java.awt.Color(255, 0, 0));
        jLabel68.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel68.setText("*");
        jLabel68.setIconTextGap(8);
        jLabel68.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        jLabel71.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel71.setForeground(new java.awt.Color(255, 0, 0));
        jLabel71.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel71.setText("*");
        jLabel71.setIconTextGap(8);
        jLabel71.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        jLabel63.setText("Tempo de compra da propriedade:");

        jLabel2.setText("SELECIONE A PROPRIEDADE RURAL");

        jLabel60.setText("Código do imovel no INCRA:");

        try {
            CODINCRA.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###.###-#")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        CODINCRA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CODINCRAActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(OUTRASATIVI);

        jLabel64.setText("Outras atividades:");

        ADICONAR_FAZENDA_.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/fazenda.png"))); // NOI18N
        ADICONAR_FAZENDA_.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ADICONAR_FAZENDA_MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ADICONAR_FAZENDA_MouseEntered(evt);
            }
        });

        jLabel74.setText("Residência atual:");

        jLabel61.setText("Numero NIRF:");

        try {
            Numero_NIRF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#.###.###-#")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel59.setText("Municipio cede:");

        jLabel69.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel69.setForeground(new java.awt.Color(255, 0, 0));
        jLabel69.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel69.setText("*");
        jLabel69.setIconTextGap(8);
        jLabel69.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        BOTAO_VOLTAR_.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/voltar.png"))); // NOI18N
        BOTAO_VOLTAR_.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BOTAO_VOLTAR_MouseClicked(evt);
            }
        });

        BOTAO_REFAZER_.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/atualizaz.png"))); // NOI18N
        BOTAO_REFAZER_.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BOTAO_REFAZER_MouseClicked(evt);
            }
        });

        BOTAO_SALVAR_.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/salvar_1.png"))); // NOI18N
        BOTAO_SALVAR_.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BOTAO_SALVAR_MouseClicked(evt);
            }
        });

        VOLTAR1_.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/voltar.png"))); // NOI18N
        VOLTAR1_.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                VOLTAR1_MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel64)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel45)
                                        .addGap(4, 4, 4)
                                        .addComponent(NOMEFAZENDA, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, 0)
                                        .addComponent(jLabel67))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel60)
                                        .addGap(4, 4, 4)
                                        .addComponent(CODINCRA, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel63)
                                        .addGap(1, 1, 1)
                                        .addComponent(TEMPOCOMPRA, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(4, 4, 4)
                                        .addComponent(jLabel71)))
                                .addGap(53, 53, 53)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel62)
                                                .addGap(3, 3, 3)
                                                .addComponent(AREAFAZENDA, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(4, 4, 4)
                                                .addComponent(jLabel70))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel46)
                                                .addGap(4, 4, 4)
                                                .addComponent(LOGRADOURO, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(4, 4, 4)
                                                .addComponent(jLabel68))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGap(146, 146, 146)
                                                .addComponent(ADICONAR_FAZENDA_)))
                                        .addGap(70, 70, 70)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                                        .addComponent(jLabel61)
                                                        .addGap(4, 4, 4)
                                                        .addComponent(Numero_NIRF, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                                        .addComponent(jLabel59)
                                                        .addGap(3, 3, 3)
                                                        .addComponent(MUNICEDE, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel69))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGap(33, 33, 33)
                                                .addComponent(BOTAO_VOLTAR_)
                                                .addGap(28, 28, 28)
                                                .addComponent(BOTAO_REFAZER_)
                                                .addGap(27, 27, 27)
                                                .addComponent(BOTAO_SALVAR_))))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel74)
                                        .addGap(4, 4, 4)
                                        .addComponent(RESIDEN_ATUAL, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(VOLTAR1_, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(86, 86, 86)
                        .addComponent(jLabel2)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel2))
                    .addComponent(VOLTAR1_, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NOMEFAZENDA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel67)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel45))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(AREAFAZENDA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel62))
                            .addComponent(jLabel70)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(MUNICEDE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel59))
                            .addComponent(jLabel69))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(LOGRADOURO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel46))
                            .addComponent(jLabel68)
                            .addComponent(jLabel71)
                            .addComponent(TEMPOCOMPRA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel63)
                            .addComponent(Numero_NIRF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel61)))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CODINCRA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel60)
                            .addComponent(RESIDEN_ATUAL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel74))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(BOTAO_REFAZER_, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(BOTAO_VOLTAR_))
                                    .addComponent(BOTAO_SALVAR_))
                                .addGap(19, 19, 19))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(52, 52, 52)
                                        .addComponent(jLabel64))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(38, 38, 38)
                                        .addComponent(ADICONAR_FAZENDA_)))
                                .addGap(1, 1, 1))))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jScrollPane4.setViewportView(jPanel2);

        javax.swing.GroupLayout DADOS_RURAIS_SINDLayout = new javax.swing.GroupLayout(DADOS_RURAIS_SIND);
        DADOS_RURAIS_SIND.setLayout(DADOS_RURAIS_SINDLayout);
        DADOS_RURAIS_SINDLayout.setHorizontalGroup(
            DADOS_RURAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DADOS_RURAIS_SINDLayout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 891, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        DADOS_RURAIS_SINDLayout.setVerticalGroup(
            DADOS_RURAIS_SINDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        FORM_GUIAS.addTab("DADOS RURAIS", DADOS_RURAIS_SIND);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(FORM_GUIAS, javax.swing.GroupLayout.PREFERRED_SIZE, 893, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(FORM_GUIAS, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CODINCRAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CODINCRAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CODINCRAActionPerformed

    private void BOTAO_AVANCAR_MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BOTAO_AVANCAR_MouseEntered
        BOTAO_AVANCAR_.setToolTipText("AVANÇAR");
    }//GEN-LAST:event_BOTAO_AVANCAR_MouseEntered

    private void MAEMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MAEMouseEntered
        MAE.setToolTipText("Filiação");
    }//GEN-LAST:event_MAEMouseEntered

    private void PAIMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PAIMouseEntered
        PAI.setToolTipText("Filiação");
    }//GEN-LAST:event_PAIMouseEntered

    private void SECAOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SECAOActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SECAOActionPerformed

    private void RGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RGActionPerformed
        DATAEXPE.setEnabled(true);
    }//GEN-LAST:event_RGActionPerformed

    private void NASCIONALIDADEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NASCIONALIDADEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NASCIONALIDADEActionPerformed

    private void CELULARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CELULARActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CELULARActionPerformed

    private void TOTAO_REFAZER_PMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TOTAO_REFAZER_PMouseClicked
        limparCampus_Pessoais();
    }//GEN-LAST:event_TOTAO_REFAZER_PMouseClicked

    private void BOTAO_AVANCAR_MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BOTAO_AVANCAR_MouseClicked

        validacao = false;
        if (erro == 1) {
            erro = 0;
        }
        validacao = validar_obrigatorios_pessoais();
        if (validacao) {
            preencher_objeto_Pessoal();
            if ("".equals(campos_rurais_vazios())) {
                ADICONAR_FAZENDA_.setVisible(true);
            }
            selecionar_guia(2);
        }
    }//GEN-LAST:event_BOTAO_AVANCAR_MouseClicked

    private void BOTAO_VOLTAR_MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BOTAO_VOLTAR_MouseClicked
        selecionar_guia(1);
    }//GEN-LAST:event_BOTAO_VOLTAR_MouseClicked

    private void CANCELARMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CANCELARMouseClicked
        limparCampus_Pessoais();
        selecionar_guia(0);
    }//GEN-LAST:event_CANCELARMouseClicked

    private void BOTAO_REFAZER_MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BOTAO_REFAZER_MouseClicked
        limparCampus_Rurais();
        ADICONAR_FAZENDA_.setVisible(true);
        clicoTabela = false;
    }//GEN-LAST:event_BOTAO_REFAZER_MouseClicked

    private void BOTAO_SALVAR_MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BOTAO_SALVAR_MouseClicked
        status2 = "salvar";

        if ("cadastrar sind".equals(status)) {
            if (totalFazenda > 0) {  // se foi informado mais de uma propriedade
                if ("".equals(campos_rurais_vazios())) {       // OS CAMPOS DO FORMULARIO ESTÃO VAZIOS, E OS DADOS JA ESTÃO TODOS NO ARRAY DE OBJETO E TBM JA ESTÃO TODOS LISTADOS NA TABELA                   
                    conf = "cadastrando uma";
                    confirma_salvamento_fazenda(conf);
                } else if ("preencher".equals(campos_rurais_vazios())) { // OS CAMPOS DO FORMULARIO NÃO ESTÃO TODOS VAZIOS, INDEPENTENDE SE TEM OU NÃO DADOS NO ARRAY DE OBJETOS
                    validacao = validar_obrigatorios_rurais();
                    if (validacao) {
                        if (id_propriedade_rural > 0) {  // VERIFICA SE EDITO DADOS QUE JA FOI INFORMADO
                            atualizar_linha_tabela(preencher_objeto_Rural(), linhaSelecionada);
                            pr = new Dados_Rurais();
                            pr = preencher_objeto_Rural();
                            atualizarArray(pr);
                            conf = "cadastrando uma";
                            confirma_salvamento_fazenda(conf);
                        } else { // informo dados de otra nova propriedade rural alem das que ja estão no objeto
                            totalFazenda++;
                            RURAL.add(preencher_objeto_Rural());
                            LISTAR_TABELA_Rural(RURAL);
                            conf = "cadastrando uma";
                            confirma_salvamento_fazenda(conf);
                        }
                    }
                }

            } else { //Cadastrando uma unica propriedade rural para o novo sindicalizado que esta sendo cadastrado
                validacao = validar_obrigatorios_rurais();
                if (validacao) {
                    totalFazenda++;
                    RURAL.add(preencher_objeto_Rural());
                    LISTAR_TABELA_Rural(RURAL);
                    confirma_salvamento_fazenda(conf);
                }

            }
        } else if ("alterar".equals(status)) {
            if ("preencher".equals(campos_rurais_vazios())) {     // OS CAMPOS DO FORMULARIO NÃO ESTÃO TODOS VAZIOS, INDEPENTENDE SE TEM OU NÃO DADOS NO ARRAY DE OBJETOS
                validacao = validar_obrigatorios_rurais();
                if (validacao) {
                    if (clicoTabela && totalFazenda == 0) {  // clico na tabela pra edita e altera dados que ja estão salvos no banco
                        pr = new Dados_Rurais();
                        pr = preencher_objeto_Rural();
                        LISTAR_TABELA_Rural(atualizarArray(pr));
                        conf = "alterando uma";
                        confirma_salvamento_fazenda(conf);
                    } else if (!clicoTabela && totalFazenda == 0) {   //ADICIONANDO UMA UNICA PROPRIEDADE RURAL
                        ADICIONA_RURAL.add(preencher_objeto_Rural());
                        conf = "adicionando uma";
                        totalFazenda++;
                        confirma_salvamento_fazenda(conf);
                    } else if (clicoTabela && totalFazenda > 0) { // alterando dados de uma propriedade que ja esta cadastrada, mas que ja foi adicionada novas
                        if (id_propriedade_rural == 0) {
                            atualizarArrayADD(preencher_objeto_Rural());
                            conf = "adicionando muitas";
                            confirma_salvamento_fazenda(conf);
                        } else {
                            conf = "alterando uma ADD";
                            confirma_salvamento_fazenda(conf);
                        }
                    } else if (!clicoTabela && totalFazenda > 0) {  // Adicionando mais uma propriedade rural
                        totalFazenda++;
                        ADICIONA_RURAL.add(preencher_objeto_Rural());
                        conf = "adicionando muitas";
                        confirma_salvamento_fazenda(conf);
                    }
                }
            } else if ("".equals(campos_rurais_vazios())) {    //altero apenas dados pessoais
                if (totalFazenda > 0) {
                    conf = "adicionando muitas";
                    confirma_salvamento_fazenda(conf);
                } else {
                    conf = "alterando P";
                    confirma_salvamento_fazenda(conf);
                }
            }
        }
    }//GEN-LAST:event_BOTAO_SALVAR_MouseClicked

    private void ADICONAR_FAZENDA_MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ADICONAR_FAZENDA_MouseClicked
        status2 = "adicionar";
        validacao = validar_obrigatorios_rurais();
        if (validacao) {
            if ("cadastrar sind".equals(status)) {
                if ("preencher".equals(campos_rurais_vazios())) {  // os campus do forumalario estão preenchidos               
                    if (id_propriedade_rural > 0) {     //clico na tabela de propriedade rural para edita e altera os dados de uma propriedade que ja foi informada
                        atualizar_linha_tabela(preencher_objeto_Rural(), linhaSelecionada);
                        pr = new Dados_Rurais();
                        pr = preencher_objeto_Rural();
                        atualizarArray(pr);
                        limparCampus_Rurais();
                        id_propriedade_rural = 0;
                    } else {    //ta adicionando uma nova propriedade rural de um sindicalizado
                        totalFazenda++;
                        RURAL.add(preencher_objeto_Rural());
                        LISTAR_TABELA_Rural(RURAL);
                        limparCampus_Rurais();
                    }

                }
            } else if ("alterar".equals(status)) {
                if ("preencher".equals(campos_rurais_vazios()) && !clicoTabela) {   //ADICIONANDO UMA NOVA PROPRIEDADE RURAL
                    totalFazenda++;
                    if (totalFazenda == 1) {
                        ADD = DADOSR.listar_Tabela_RURAL_ADD(id_sindicalizado, preencher_objeto_Rural(), false);
                        ADICIONA_RURAL.add(preencher_objeto_Rural());
                        LISTAR_TABELA_Rural(ADD);
                        limparCampus_Rurais();
                    } else if (totalFazenda > 1) {
                        ADD.add(preencher_objeto_Rural());
                        ADICIONA_RURAL.add(preencher_objeto_Rural());
                        LISTAR_TABELA_Rural(ADD);
                        limparCampus_Rurais();
                    }
                } else if ("preencher".equals(campos_rurais_vazios()) && clicoTabela) {
                    if (id_propriedade_rural == 0) {
                        pr = new Dados_Rurais();
                        pr = preencher_objeto_Rural();
                        ADD.clear();
                        ADD = DADOSR.listar_Tabela_RURAL_ADD(id_sindicalizado, preencher_objeto_Rural(), true);
                        ADD.addAll(atualizarArrayADD(pr));
                        for (int i = 0; i < ADD.size(); i++) {
                            Dados_Rurais r = ADD.get(i);
                            System.out.println("nome: " + r.getNomeFazenda());
                        }
                        LISTAR_TABELA_Rural(ADD);
                        limparCampus_Rurais();
                        clicoTabela = false;
                        clicoTabela = false;
                    }
                }
            }
        }
    }//GEN-LAST:event_ADICONAR_FAZENDA_MouseClicked

    private void TABELA_PROPRIEDADE_RURALMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TABELA_PROPRIEDADE_RURALMouseClicked
        linhaSelecionada = TABELA_PROPRIEDADE_RURAL.getSelectedRow();
        altera_dados_JTABLE(linhaSelecionada);
        clicoTabela = true;
    }//GEN-LAST:event_TABELA_PROPRIEDADE_RURALMouseClicked

    private void ADICONAR_FAZENDA_MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ADICONAR_FAZENDA_MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_ADICONAR_FAZENDA_MouseEntered

    private void NOME_PesquisarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NOME_PesquisarMouseClicked

    }//GEN-LAST:event_NOME_PesquisarMouseClicked

    private void NOME_PesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NOME_PesquisarActionPerformed

    }//GEN-LAST:event_NOME_PesquisarActionPerformed

    private void NOME_PesquisarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NOME_PesquisarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if ("".equals(NOME.getText()) && "   .   .    -   ".equals(CPF.getText()) && "       ".equals(RG.getText())) {
                listar_Tabela_Sind();
            } else {
                ID = 0;
                ID = pesquisar_Sind(NOME.getText(), CPF.getText(), RG.getText());
                int r = Util.selectNull(ID);
                if (r == 0 || r < 0) {
                    NOME.setText("");
                    CPF.setValue(null);
                    RG.setValue(null);
                    listar_Tabela_Sind();
                }
            }
        }
    }//GEN-LAST:event_NOME_PesquisarKeyPressed

    private void CPF_PesquisarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CPF_PesquisarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if ("".equals(NOME.getText()) && "   .   .    -   ".equals(CPF.getText()) && "       ".equals(RG.getText())) {
                listar_Tabela_Sind();
            } else {
                ID = 0;
                ID = pesquisar_Sind(NOME.getText(), CPF.getText(), RG.getText());
                int r = Util.selectNull(ID);
                if (r == 0 || r < 0) {
                    NOME.setText("");
                    CPF.setValue(null);
                    RG.setValue(null);
                    listar_Tabela_Sind();
                }
            }
        }
    }//GEN-LAST:event_CPF_PesquisarKeyPressed

    private void RG_PesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RG_PesquisaActionPerformed

    }//GEN-LAST:event_RG_PesquisaActionPerformed

    private void RG_PesquisaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RG_PesquisaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if ("".equals(NOME.getText()) && "   .   .    -   ".equals(CPF.getText()) && "       ".equals(RG.getText())) {
                listar_Tabela_Sind();
            } else {
                ID = 0;
                ID = pesquisar_Sind(NOME.getText(), CPF.getText(), RG.getText());
                int r = Util.selectNull(ID);
                if (r == 0 || r < 0) {
                    NOME.setText("");
                    CPF.setValue(null);
                    RG.setValue(null);
                    listar_Tabela_Sind();
                }
            }
        }
    }//GEN-LAST:event_RG_PesquisaKeyPressed

    private void BOTAO_PESQUISAR_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BOTAO_PESQUISAR_ActionPerformed
        if ("".equals(NOME_Pesquisar.getText()) && "   .   .    -   ".equals(CPF_Pesquisar.getText()) && "       ".equals(RG_Pesquisa.getText())) {
            listar_Tabela_Sind();
        } else {
            ID = 0;
            ID = pesquisar_Sind(NOME_Pesquisar.getText(), CPF_Pesquisar.getText(), RG_Pesquisa.getText());
            int r = Util.selectNull(ID);
            if (r == 0) {
                limparCampus_pesquisa();
                listar_Tabela_Sind();
            }
        }
    }//GEN-LAST:event_BOTAO_PESQUISAR_ActionPerformed

    private void TABELA_SINDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TABELA_SINDMouseClicked

        id_sindicalizado = Integer.parseInt(TABELA_SIND.getValueAt(TABELA_SIND.getSelectedRow(), 0).toString());
        if (null != status) {
            switch (status) {
                case "alterar": {
                    String ObjButtons[] = {"Sim", "Não"};
                    int escolha = JOptionPane.showOptionDialog(null,
                            "Deseja alterar os dados selecionados?", "ATENÇÃO",
                            JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null,
                            ObjButtons, ObjButtons[1]);
                    if (escolha == 0) {
                        preencher_campus_pessoais(preencer_objeto_dadosP_tabela());
                        LISTAR_TABELA_Rural(DADOSR.listar_Tabela_RURAL(id_sindicalizado));
                        selecionar_guia(1);
                    }
                    break;
                }
                case "excluir": {
                    String ObjButtons[] = {"Sim", "Não"};
                    int escolha = JOptionPane.showOptionDialog(null,
                            "Tem certeza que deseja excluir esses dados?", "ATENÇÃO",
                            JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null,
                            ObjButtons, ObjButtons[1]);
                    if (escolha == 0) {
                        Util_DAO ud = new Util_DAO();
                        ud.excluir(id_sindicalizado, "sind");
                        listar_Tabela_Sind();
                    }
                    break;
                }
                case "relatorio": {
                    String ObjButtons[] = {"Sim", "Não"};
                    int escolha = JOptionPane.showOptionDialog(null,
                            "Deseja emitir um relatório com os dados desse sindicalizado?", "ATENÇÃO",
                            JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null,
                            ObjButtons, ObjButtons[1]);
                    if (escolha == 0) {
                        Relatorio(id_sindicalizado);
                    }
                    break;
                }
                default:
                    break;
            }
        }
    }//GEN-LAST:event_TABELA_SINDMouseClicked

    private void TABELA_SINDMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TABELA_SINDMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_TABELA_SINDMouseEntered

    private void VOLTAR1_MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_VOLTAR1_MouseClicked
        selecionar_guia(1);
    }//GEN-LAST:event_VOLTAR1_MouseClicked

    public void selecionar_guia(int n) {
        this.FORM_GUIAS.setEnabledAt(n, true); // desabilita toda a aba 1
        this.FORM_GUIAS.setSelectedIndex(n);
        switch (n) {
            case 0:
                this.FORM_GUIAS.setEnabledAt(1, false); // desabilita toda a aba 1
                this.FORM_GUIAS.setEnabledAt(2, false); // desabilita toda a aba 2
                break;
            case 1:
                this.FORM_GUIAS.setEnabledAt(0, false); // desabilita toda a aba 0
                this.FORM_GUIAS.setEnabledAt(2, false); // desabilita toda a aba 2
                if ("cadastrar sind".equals(status)) {
                    CANCELAR.setVisible(false);
                }
                break;
            case 2:
                this.FORM_GUIAS.setEnabledAt(0, false); // desabilita toda a aba 0
                this.FORM_GUIAS.setEnabledAt(1, false); // desabilita toda a aba 1
                break;
            default:
                break;
        }
    }

    public void setPosicao() { // faz o formulario aparecer centralizado na tela
        Dimension d = this.getDesktopPane().getSize();
        this.setLocation((d.width - this.getSize().width) / 2, (d.height - this.getSize().height) / 2);
    }

    public void limparVariaveis() {
        status2 = "";
        clicoTabela = false;
        totalFazenda = 0;
        conf = "";
        validacao = false;
        id_propriedade_rural = 0;
        id_sindicalizado = 0;
        pr = null;
        RURAL.clear();
        ADICIONA_RURAL.clear();
        ADD.clear();

    }

    public void confirma_salvamento_fazenda(String conf) {
        if ("cadastrar sind".equals(status)) {
            String ObjButtons[] = {"Sim", "Não"};
            int PromptResult = JOptionPane.showOptionDialog(null,
                    "Deseja cadastrar apenas " + totalFazenda + " propriedade rura?", "ATENÇÃO",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null,
                    ObjButtons, ObjButtons[0]);
            if (PromptResult == 0) { // salva todos os dados que ja foi informados
                id_sindicalizado = DADOSP.salvar_Dados_P(dadosp);
                DADOSR.salvar_Dados_R(RURAL, id_sindicalizado);

                RURAL.clear();      //LIMPA O ARRAY DE OBJETOS
                totalFazenda = 0;
                limparCampus_Rurais();
                limparTabela();
                limparCampus_Pessoais();
                id_propriedade_rural = 0;
                id_sindicalizado = 0;
                clicoTabela = false;
                conf = "";
            } else if (PromptResult == 1) {  // Não salva os dados que já foi informados, mas limpa o formulario pra receber dados de novas proprieades rurais e juntar com as que ja foi informadas
                limparCampus_Rurais();
            }

        } else if ("alterar".equals(status)) {
            if ("alterando uma".equals(conf)) {
                String ObjButtons[] = {"Sim", "Não"};
                int PromptResult = JOptionPane.showOptionDialog(null,
                        "Deseja alterar os dados de " + dadosp.getNome() + "?", "ATENÇÃO",
                        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null,
                        ObjButtons, ObjButtons[0]);
                if (PromptResult == 0) { //resposta POSITIVA para salvar os dados     

                    DADOSP.alterar_Dados_P(preencher_objeto_Pessoal());
                    DADOSR.alterar_Dados_R(preencher_objeto_Rural());
                    limparCampus_Rurais();
                    LISTAR_TABELA_Rural(DADOSR.listar_Tabela_RURAL(id_sindicalizado));
                    id_propriedade_rural = 0;
                    id_sindicalizado = 0;
                    RURAL.clear();      //LIMPA O ARRAY DE OBJETOS
                    ADICONAR_FAZENDA_.setVisible(true);
                    clicoTabela = false;

                } else if (PromptResult == 1) {
                    limparCampus_Rurais();
                }
            } else if ("alterando uma ADD".equals(conf)) {
                String ObjButtons[] = {"Sim", "Não"};
                int PromptResult = JOptionPane.showOptionDialog(null,
                        "Deseja cadastrar as " + totalFazenda + " propriedades rurais que foram adicionadas?", "ATENÇÃO",
                        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null,
                        ObjButtons, ObjButtons[0]);
                if (PromptResult == 0) { // salva todos os dados que ja foi informados
                    DADOSP.alterar_Dados_P(preencher_objeto_Pessoal());
                    DADOSR.alterar_Dados_R(preencher_objeto_Rural());
                    DADOSR.salvar_Dados_R(ADICIONA_RURAL, id_sindicalizado);
                    LISTAR_TABELA_Rural(DADOSR.listar_Tabela_RURAL(id_sindicalizado));

                    RURAL.clear();      //LIMPA O ARRAY DE OBJETOS
                    totalFazenda = 0;
                    limparCampus_Rurais();
                    id_propriedade_rural = 0;
                    id_sindicalizado = 0;
                    clicoTabela = false;
                } else if (PromptResult == 0) {
                    DADOSP.alterar_Dados_P(preencher_objeto_Pessoal());
                    DADOSR.alterar_Dados_R(preencher_objeto_Rural());
                    LISTAR_TABELA_Rural(DADOSR.listar_Tabela_RURAL(id_sindicalizado));

                    RURAL.clear();      //LIMPA O ARRAY DE OBJETOS
                    totalFazenda = 0;
                    limparCampus_Rurais();
                    id_propriedade_rural = 0;
                    id_sindicalizado = 0;
                    clicoTabela = false;
                }
            } else if ("adicionando uma".equals(conf) || "cadastrando uma".equals(conf) || "adicionando muitas".equals(conf)) {
                String ObjButtons[] = {"Sim", "Não"};
                int PromptResult = JOptionPane.showOptionDialog(null,
                        "Deseja Adicionar " + totalFazenda + " propriedades rurais para " + dadosp.getNome() + "?", "ATENÇÃO",
                        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null,
                        ObjButtons, ObjButtons[0]);
                if (PromptResult == 0) { // salva todos os dados que ja foi informados                   
                    DADOSP.alterar_Dados_P(preencher_objeto_Pessoal());
                    if ("cadastrando uma".equals(conf)) {
                        DADOSR.salvar_Dados_R(RURAL, id_sindicalizado);
                    } else if ("adicionando uma".equals(conf) || "adicionando muitas".equals(conf)) {
                        DADOSR.salvar_Dados_R(ADICIONA_RURAL, id_sindicalizado);
                    }
                    LISTAR_TABELA_Rural(DADOSR.listar_Tabela_RURAL(id_sindicalizado));

                    RURAL.clear();      //LIMPA O ARRAY DE OBJETOS
                    totalFazenda = 0;
                    limparCampus_Rurais();
                    id_propriedade_rural = 0;
                    id_sindicalizado = 0;
                    clicoTabela = false;
                } else if (PromptResult == 1) {  // Não salva os dados que já foi informados, mas limpa o formulario pra receber dados de novas proprieades rurais e juntar com as que ja foi informadas
                    limparCampus_Rurais();
                }
            } else if ("alterando P".equals(conf)) {
                String ObjButtons[] = {"Sim", "Não"};
                int PromptResult = JOptionPane.showOptionDialog(null,
                        "Deseja alterar apenas os dados pessoais de " + dadosp.getNome() + "?", "ATENÇÃO",
                        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null,
                        ObjButtons, ObjButtons[0]);
                if (PromptResult == 0) {
                    DADOSP.alterar_Dados_P(preencher_objeto_Pessoal());
                    limparCampus_Pessoais();
                    limparCampus_pesquisa();
                    limparTabela();
                    id_sindicalizado = 0;
                    RURAL.clear();      //LIMPA O ARRAY DE OBJETOS
                    ADICONAR_FAZENDA_.setVisible(true);
                    clicoTabela = false;
                    listar_Tabela_Sind();
                }
            }
        }
    }

    public void desbloquear_campus_rurais() {
        NOMEFAZENDA.setEnabled(true);
        AREAFAZENDA.setEnabled(true);
        LOGRADOURO.setEnabled(true);
        Numero_NIRF.setEnabled(true);
        MUNICEDE.setEnabled(true);
        TEMPOCOMPRA.setEnabled(true);
        CODINCRA.setEnabled(true);
        OUTRASATIVI.setEnabled(true);
        RESIDEN_ATUAL.setEnabled(true);
    }

    public void limparCampus_Pessoais() {
        NOME.setText("");
        NASCIMENTO.setDate(null);
        ESTADOCIVI.setSelectedIndex(0);
        CPF.setValue("");
        CELULAR.setValue("");
        RG.setValue("");
        DATAEXPE.setDate(null);
        NASCIONALIDADE.setText("");
        RESERVISTA.setValue("");
        CATEGORIA.setText("");
        TITULO_ELEITO.setValue("");
        ZONA.setValue("");
        SECAO.setValue("");
        PAI.setText("");
        MAE.setText("");
    }

    public void limparCampus_Rurais() {
        NOMEFAZENDA.setText("");
        AREAFAZENDA.setText("");
        LOGRADOURO.setText("");
        Numero_NIRF.setValue("");
        MUNICEDE.setText("");
        TEMPOCOMPRA.setText("");
        CODINCRA.setValue("");
        OUTRASATIVI.setText("");
        RESIDEN_ATUAL.setText("");
    }

    public ArrayList<Dados_Rurais> atualizarArray(Dados_Rurais ru) {
        for (Dados_Rurais r : RURAL) {
            if (r.getId_proprie() == ru.getId_proprie() && r.getNIRF().equals(ru.getNIRF()) && r.getCodINCRA().equals(ru.getCodINCRA())) {
                r.setId_proprie(ru.getId_proprie());
                r.setNomeFazenda(ru.getNomeFazenda());
                r.setLogradouro(ru.getLogradouro());
                r.setCodINCRA(ru.getCodINCRA());
                r.setNIRF(ru.getNIRF());
                r.setAreaPropri(ru.getAreaPropri());
                r.setTempoCompra(ru.getTempoCompra());
                r.setOutrasA(ru.getOutrasA());
                r.setResidenciaAtual(ru.getResidenciaAtual());
            }
        }

        return RURAL;
    }

    public ArrayList<Dados_Rurais> atualizarArrayADD(Dados_Rurais ru) {
        for (Dados_Rurais r : ADICIONA_RURAL) {
            if (r.getId_proprie() == ru.getId_proprie() && r.getNIRF().equals(ru.getNIRF()) && r.getCodINCRA().equals(ru.getCodINCRA())) {
                r.setId_proprie(ru.getId_proprie());
                r.setNomeFazenda(ru.getNomeFazenda());
                r.setLogradouro(ru.getLogradouro());
                r.setCodINCRA(ru.getCodINCRA());
                r.setNIRF(ru.getNIRF());
                r.setAreaPropri(ru.getAreaPropri());
                r.setTempoCompra(ru.getTempoCompra());
                r.setOutrasA(ru.getOutrasA());
                r.setResidenciaAtual(ru.getResidenciaAtual());
            }
        }

        for (int i = 0; i < ADICIONA_RURAL.size(); i++) {
            Dados_Rurais r = ADICIONA_RURAL.get(i);
            System.out.println("array atualizado - nome: " + r.getNomeFazenda());
        }
        return ADICIONA_RURAL;
    }

    public void preencher_campus_pessoais(Dados_Pessoais si) {
        NOME.setText(si.getNome());
        NASCIMENTO.setDate(si.getDataNasci());
        ESTADOCIVI.setSelectedItem(si.getEstadoCivil());
        CPF.setText(si.getCpf());
        CELULAR.setText(si.getCelular());
        RG.setText(si.getRg());
        DATAEXPE.setDate(si.getDataExpedicao());
        NASCIONALIDADE.setText(si.getNascionalidade());
        RESERVISTA.setText(si.getReservista());
        CATEGORIA.setText(si.getCategoria());
        TITULO_ELEITO.setText(si.getTituloEleito());
        if (si.getZona() == 0) {
            ZONA.setText("");
        } else {
            ZONA.setText(String.valueOf(si.getZona()));
        }
        if (si.getSecao() == 0) {
            SECAO.setText("");
        } else {
            SECAO.setText(String.valueOf(si.getSecao()));
        }
        PAI.setText(si.getPai());
        MAE.setText(si.getMae());

        status = "alterar";
        this.id_sindicalizado = si.getId_sindi();
        CANCELAR.setVisible(true);
        TOTAO_REFAZER_P.setVisible(false);
    }

    public void atualizar_linha_tabela(Dados_Rurais pr, int linha) {
        String id = "";
        if (pr.getId_proprie() > 0) {
            id = String.valueOf(pr.getId_proprie());
        }
        TABELA_PROPRIEDADE_RURAL.setValueAt(id, linha, 0);
        TABELA_PROPRIEDADE_RURAL.setValueAt(pr.getNomeFazenda(), linha, 1);
        TABELA_PROPRIEDADE_RURAL.setValueAt(pr.getAreaPropri(), linha, 2);
        TABELA_PROPRIEDADE_RURAL.setValueAt(pr.getMuniciSede(), linha, 3);
        TABELA_PROPRIEDADE_RURAL.setValueAt(pr.getTempoCompra(), linha, 4);
        TABELA_PROPRIEDADE_RURAL.setValueAt(pr.getLogradouro(), linha, 5);
        TABELA_PROPRIEDADE_RURAL.setValueAt(pr.getNIRF(), linha, 6);
        TABELA_PROPRIEDADE_RURAL.setValueAt(pr.getCodINCRA(), linha, 7);
        TABELA_PROPRIEDADE_RURAL.setValueAt(pr.getResidenciaAtual(), linha, 8);
        TABELA_PROPRIEDADE_RURAL.setValueAt(pr.getOutrasA(), linha, 9);
    }

    public void preencher_campus_rurais(Dados_Rurais pr) {
        NOMEFAZENDA.setText(pr.getNomeFazenda());
        AREAFAZENDA.setText(pr.getAreaPropri());
        LOGRADOURO.setText(pr.getLogradouro());
        Numero_NIRF.setText(pr.getNIRF());
        MUNICEDE.setText(pr.getMuniciSede());
        TEMPOCOMPRA.setText(pr.getTempoCompra());
        CODINCRA.setText(pr.getCodINCRA());
        OUTRASATIVI.setText(pr.getOutrasA());
        RESIDEN_ATUAL.setText(pr.getResidenciaAtual());

        status = "alterar";
        this.id_sindicalizado = pr.getId_sindi();
    }

    public String campos_rurais_vazios() {
        int campu = 0, obri = 0;
        String campus = "";
        if (!"".equals(NOMEFAZENDA.getText())) {
            obri++;
        }
        if (!"".equals(AREAFAZENDA.getText())) {
            obri++;
        }
        if (!"".equals(LOGRADOURO.getText())) {
            obri++;
        }
        if (!"".equals(MUNICEDE.getText())) {
            obri++;
        }
        if (!"".equals(TEMPOCOMPRA.getText())) {
            obri++;
        }
        if (!" .   .   - ".equals(Numero_NIRF.getText())) {
            campu++;
        }
        if (!"   .   .   .   - ".equals(CODINCRA.getText())) {
            campu++;
        }
        if (!"".equals(OUTRASATIVI.getText())) {
            campu++;
        }
        if (!"".equals(RESIDEN_ATUAL.getText())) {
            campu++;
        }

        if (obri == 5) {      // SE ESTIVE PREENCHIDO TODOS OS CAMPUS OBRIGATÓRIOS
            campus = "preencher";
        } else if (obri < 5 && obri > 0) {         // SE ESTIVE PREENCHIDO SÓ ALGUNS DOS CAMPUS OBRIGATÓRIOS
            validar_obrigatorios_rurais();
        } else if (campu > 0 && obri == 0) { // SE ESTIVE PREENCHIDO SÓ ALGUNS DOS CAMPUS NÃO OBRIGATÓRIOS
            if (totalFazenda == 0) {
                validar_obrigatorios_rurais();
            } else {
                JOptionPane.showMessageDialog(null, "Se deseja cadastrar mais uma propriedade rural, informe no minimo todos os dados obrigatórios", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                limparCampus_Rurais();
            }
        } else if (campu == 0 && obri == 0 && "adicionar".equals(status2)) {
            validacao = validar_obrigatorios_rurais();
        }

        return campus;
    }

    public final void validaNumerosLetras() {
        Util.soLetras(NOME);
        Util.soLetras(CATEGORIA);
        Util.soNumeros(RG);
        Util.soLetras(NASCIONALIDADE);
        Util.soNumeros(RESERVISTA);
        Util.soNumeros(TITULO_ELEITO);
        Util.soNumeros(ZONA);
        Util.soNumeros(SECAO);
        Util.soLetras(PAI);
        Util.soLetras(MAE);
        Util.soLetras(MUNICEDE);
        Util.soLetras(RESIDEN_ATUAL);
    }

    public boolean validar_obrigatorios_pessoais() {
        String cpf;

        if ("".equals(NOME.getText())) {
            JOptionPane.showMessageDialog(null, "Informe o nome");
            erro = 1;
            NOME.requestFocus();
        } else if (NASCIMENTO.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Informe a data de nascimento");
            erro = 1;
            NASCIMENTO.requestFocus();
        } else {
            String data = Util.verificar_Data(df.format(NASCIMENTO.getDate()), true);
            idade = Util.idade;

            if ("//".equals(data)) {
                if (idade < 18) {
                    JOptionPane.showMessageDialog(null, "Não é permitido o cadastramento de sindicalizado menor de idade", "Atenção", JOptionPane.ERROR_MESSAGE);
                    erro = 1;
                } else {
                    JOptionPane.showMessageDialog(null, "A data de nascimento do sindicalizado é invalida", "Atenção", JOptionPane.ERROR_MESSAGE);
                    erro = 1;
                }
                NASCIMENTO.setDate(null);
            }
        }
        if (erro == 0 && "   .   .    -   ".equals(CPF.getText())) {
            erro = 1;
            JOptionPane.showMessageDialog(null, "Informe o CPF do sindicalizado ");
            CPF.requestFocus();
        } else {
            cpf = si.validar_CPF(CPF.getText());
            if ("".equals(cpf) && erro == 0) {
                erro = 1;
                JOptionPane.showMessageDialog(null, "O CPF do sindicalizado é invalido", "Atenção CPF invalido", JOptionPane.ERROR_MESSAGE);
                CPF.setValue("");
                CPF.requestFocus();
            } else if (erro == 0) {
                String i;
                if ("alterar".equals(status)) {
                    i = si.verificar_CPF(CPF.getText(), id_sindicalizado);
                } else {
                    i = si.verificar_CPF(CPF.getText(), 0);
                }
                if ("tem dono".equals(i)) {
                    erro = 1;
                    JOptionPane.showMessageDialog(null, "O CPF informado já esta cadastrado", "Atenção CPF invalido", JOptionPane.ERROR_MESSAGE);
                    CPF.setValue("");
                    CPF.requestFocus();
                }
            }
        }

        if ((erro == 0) && "       ".equals(RG.getText())) {
            JOptionPane.showMessageDialog(null, "Informe o RG");
            RG.requestFocus();
            erro = 1;
        } else {
            String R_G = si.validadar_RG(RG.getText());
            if ("".equals(R_G) && erro == 0) {
                erro = 1;
                JOptionPane.showMessageDialog(null, "O RG do sindicalizado é invalido", "Atenção RG invalido", JOptionPane.ERROR_MESSAGE);
                RG.setValue("");
                RG.requestFocus();
            } else if (erro == 0) {
                String i;
                if ("alterar".equals(status)) {
                    i = si.verificar_RG(RG.getText(), id_sindicalizado);
                } else {
                    i = si.verificar_RG(RG.getText(), 0);
                }
                if ("tem dono".equals(i)) {
                    erro = 1;
                    JOptionPane.showMessageDialog(null, "O RG informado já esta cadastrado", "Atenção RG invalido", JOptionPane.ERROR_MESSAGE);
                    RG.setValue("");
                    RG.requestFocus();
                }
            }
        }
        if (DATAEXPE.getDate() == null && erro == 0) {
            JOptionPane.showMessageDialog(null, "Informe a data de expedição do RG");
            DATAEXPE.requestFocus();
            erro = 1;
        } else if (erro == 0) {
            String data = Util.verificar_Data(df.format(DATAEXPE.getDate()), false);
            if ("//".equals(data)) {
                JOptionPane.showMessageDialog(null, "A data de Expedição do RG do sindicalizado é invalida", "Atenção", JOptionPane.ERROR_MESSAGE);
                erro = 1;
                DATAEXPE.setDate(null);
                DATAEXPE.requestFocus();
            }
        }
        if ("".equals(NASCIONALIDADE.getText()) && erro == 0) {
            JOptionPane.showMessageDialog(null, "Informe a nascionalidade");
            NASCIONALIDADE.requestFocus();
            erro = 1;
        } else if ("".equals(PAI.getText()) && erro == 0) {
            JOptionPane.showMessageDialog(null, "Informe a filiação paterna");
            PAI.requestFocus();
            erro = 1;
        } else if ("".equals(MAE.getText()) && erro == 0) {
            JOptionPane.showMessageDialog(null, "Informe a filiação materna");
            MAE.requestFocus();
            erro = 1;
        } else if (!"(  ) 9     -     ".equals(CELULAR.getText()) && erro == 0) {        // DAQUI PRA BAIXO COMEÇA A VALIDAÇÃO DOS QUE NÃO SÃO OBRIGATÓRIOS 
            String TEL = si.validadar_Telefone(CELULAR.getText());
            if ("".equals(TEL)) {
                erro = 1;
                JOptionPane.showMessageDialog(null, "O telefone do sindicalizado é invalido", "Atenção", JOptionPane.ERROR_MESSAGE);
                CELULAR.setValue("");
                CELULAR.requestFocus();
            }
        } else if (!"".equals(RESERVISTA.getText()) && erro == 0) {
            String RESER = si.validarReservista(RESERVISTA.getText());
            if ("".equals(RESER)) {
                erro = 1;
                JOptionPane.showMessageDialog(null, "O número da reservista do sindicalizado é invalido.", "Atenção", JOptionPane.ERROR_MESSAGE);
                RESERVISTA.setValue("");
                RESERVISTA.requestFocus();
            }
        } else if (!"              ".equals(TITULO_ELEITO.getText()) && erro == 0) {
            String titu = si.validar_Titulo_Eleitor(TITULO_ELEITO.getText());
            if ("".equals(titu)) {
                erro = 1;
                JOptionPane.showMessageDialog(null, "O titulo de eleitor do sindicalizado é invalido.", "Atenção", JOptionPane.ERROR_MESSAGE);
                TITULO_ELEITO.setValue("");
                TITULO_ELEITO.requestFocus();
            }
        } else if (!"   ".equals(ZONA.getText()) && erro == 0) {
            String zona = si.validar_zona(ZONA.getText());
            if ("".equals(zona)) {
                erro = 1;
                JOptionPane.showMessageDialog(null, "A zona do titulo de eleitor do sindicalizado é invalida.", "Atenção", JOptionPane.ERROR_MESSAGE);
                ZONA.setValue("");
                ZONA.requestFocus();
            }
        } else if (!"    ".equals(SECAO.getText()) && erro == 0) {
            String secao = si.validar_secao(SECAO.getText());
            if ("".equals(secao)) {
                erro = 1;
                JOptionPane.showMessageDialog(null, "A seção do titulo de eleitor do sindicalizado é invalida.", "Atenção", JOptionPane.ERROR_MESSAGE);
                SECAO.setValue("");
                SECAO.requestFocus();
            }
        }

        if (erro == 0) {
            CONT = true;
        } else if (erro == 1) {
            CONT = false;
        }

        return CONT;
    }

    public boolean validar_obrigatorios_rurais() {
        erro = 0;
        if ("".equals(NOMEFAZENDA.getText()) && erro == 0) {
            JOptionPane.showMessageDialog(null, "Informe o nome da propriedade rural");
            NOMEFAZENDA.requestFocus();
            erro = 1;
        } else if ("".equals(LOGRADOURO.getText()) && erro == 0) {
            JOptionPane.showMessageDialog(null, "Informe o logradouro da propriedade rural");
            LOGRADOURO.requestFocus();
            erro = 1;
        } else if ("".equals(MUNICEDE.getText()) && erro == 0) {
            JOptionPane.showMessageDialog(null, "Informe o municipio cede da propriedade rural");
            MUNICEDE.requestFocus();
            erro = 1;
        } else if ("".equals(AREAFAZENDA.getText()) && erro == 0) {
            JOptionPane.showMessageDialog(null, "Informe a area da propriedade rural");
            AREAFAZENDA.requestFocus();
            erro = 1;
        } else if ("".equals(TEMPOCOMPRA.getText()) && erro == 0) {
            JOptionPane.showMessageDialog(null, "Informe o tempo de compra da propriedade rural");
            TEMPOCOMPRA.requestFocus();
            erro = 1;
        } else if ("   .   .   .   - ".equals(CODINCRA.getText()) && erro == 0) {
            JOptionPane.showMessageDialog(null, "Informe o código no Incra da propriedade rural");
            CODINCRA.requestFocus();
            erro = 1;
        } else if (!"   .   .   .   - ".equals(CODINCRA.getText()) && erro == 0) {
            String codI = si.validaCodIncra(CODINCRA.getText());
            if ("".equals(codI)) {
                erro = 1;
                JOptionPane.showMessageDialog(null, "O código no INCRA da propriedade rural informado é invalido.", "Atenção", JOptionPane.ERROR_MESSAGE);
                CODINCRA.setValue("");
                CODINCRA.requestFocus();
            } else {
                String i;
                i = si.verificar_INCRA(codI, id_sindicalizado);
                System.out.println("valor do i: " + i);
                if ("tem dono".equals(i)) {
                    erro = 1;
                    JOptionPane.showMessageDialog(null, "O código no INCRA da propriedade rural informado ja é cadastrado no sistema.", "Atenção", JOptionPane.ERROR_MESSAGE);
                    CODINCRA.setValue("");
                    CODINCRA.requestFocus();
                } else if (si.verificaCodIncraADD(ADICIONA_RURAL, codI, totalFazenda)) {
                    JOptionPane.showMessageDialog(null, "Não é permitido cadastrar código no INCRA da propriedade rural repetido.", "Atenção", JOptionPane.ERROR_MESSAGE);
                    CODINCRA.setValue("");
                    CODINCRA.requestFocus();
                    erro = 1;
                }

            }
        }

        if (" .   .   - ".equals(Numero_NIRF.getText()) && erro == 0) {
            erro = 1;
            JOptionPane.showMessageDialog(null, "Informe o número da propriedade rural no   NIRF", "Atenção", JOptionPane.ERROR_MESSAGE);
            Numero_NIRF.setValue("");
            Numero_NIRF.requestFocus();
        } else if (!" .   .   - ".equals(Numero_NIRF.getText()) && erro == 0) {
            String nirf = si.validarNIRF(Numero_NIRF.getText());
            if ("".equals(nirf)) {
                erro = 1;
                JOptionPane.showMessageDialog(null, "O número do NIRF do sindicalizado é invalido.", "Atenção", JOptionPane.ERROR_MESSAGE);
                Numero_NIRF.setValue("");
                Numero_NIRF.requestFocus();
            } else {
                String i;
                if ("alterar".equals(status)) {
                    i = si.verificar_NIRF(nirf, id_sindicalizado);
                } else {
                    i = si.verificar_NIRF(nirf, 0);
                }
                if ("tem dono".equals(i)) {
                    erro = 1;
                    JOptionPane.showMessageDialog(null, "O número do NIRF informado já esta cadastrado", "Atenção RG invalido", JOptionPane.ERROR_MESSAGE);
                    Numero_NIRF.setValue("");
                    Numero_NIRF.requestFocus();
                }
            }
        }

        if (erro == 0) {
            CONT = true;
        } else if (erro == 1) {
            CONT = false;
        }

        return CONT;
    }

    public void LISTAR_TABELA_Rural(ArrayList<Dados_Rurais> DADOS_RU) {
        DefaultTableModel dtma = (DefaultTableModel) TABELA_PROPRIEDADE_RURAL.getModel();
        dtma.setNumRows(0);

        TABELA_PROPRIEDADE_RURAL.getColumnModel().getColumn(2).setPreferredWidth(110);

        TABELA_PROPRIEDADE_RURAL.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        DADOS_RU.forEach((dr) -> {
            String ID_pro = "";
            totalLinhasTabela++;
            if (dr.getId_proprie() > 0) {
                ID_pro = String.valueOf(dr.getId_proprie());
            }
            dtma.addRow(new Object[]{
                ID_pro,
                dr.getNomeFazenda(),
                dr.getAreaPropri(),
                dr.getMuniciSede(),
                dr.getTempoCompra(),
                dr.getLogradouro(),
                dr.getNIRF(),
                dr.getCodINCRA(),
                dr.getResidenciaAtual(),
                dr.getOutrasA()
            });
        });
    }

    public Dados_Rurais preencher_objeto_Rural() {
        pr = new Dados_Rurais();
        if ("cadastrar sind".equals(status) && !clicoTabela && ("salvar".equals(status2) || "adicionar".equals(status2))) {    // TA CADASTRANDO UMA UNICA OU VARIAS PROPRIEDADES
            pr.setId_proprie(totalFazenda);
        } else if ("cadastrar sind".equals(status) && clicoTabela && ("salvar".equals(status2) || "adicionar".equals(status2))) {    // TA Alterando UMA UNICA OU VARIAS PROPRIEDADES QUE JA FORAM INFORMADAS PARA O SISTEMA
            pr.setId_proprie(id_propriedade_rural);
        }
        if ("alterar".equals(status) && !clicoTabela && "salvar".equals(status2)) {         // TA ADICIONANDO UMA NOVA PROPRIEDADE
            pr.setId_proprie(totalFazenda);
        } else if ("alterar".equals(status) && clicoTabela && "salvar".equals(status2)) {    // TA ALTERANDO UMA PROPRIEDADE JA CADASTRADA
            pr.setId_proprie(id_propriedade_rural);
        } else if ("alterar".equals(status) && !clicoTabela && "adicionar".equals(status2)) {         // TA ADICIONANDO UMA NOVA PROPRIEDADE
            pr.setId_proprie(0);
        }

        pr.setNomeFazenda(NOMEFAZENDA.getText());
        pr.setLogradouro(LOGRADOURO.getText());
        pr.setMuniciSede(MUNICEDE.getText());
        pr.setCodINCRA(CODINCRA.getText());
        pr.setNIRF(Numero_NIRF.getText());
        pr.setAreaPropri(AREAFAZENDA.getText());
        pr.setTempoCompra(TEMPOCOMPRA.getText());
        pr.setOutrasA(OUTRASATIVI.getText());
        pr.setResidenciaAtual(RESIDEN_ATUAL.getText());
        pr.setExcluido(0);
        return pr;
    }

    public Dados_Rurais preencher_objto_R_JTble() {
        pr = new Dados_Rurais();
        int linha = 0, li = 0;

        while (li < TABELA_PROPRIEDADE_RURAL.getRowCount()) {
            String i = "";
            i = (TABELA_PROPRIEDADE_RURAL.getValueAt(linha, 0).toString());
            if (!"".equals(i)) {
                pr.setId_proprie(Integer.parseInt(i));
            } else {
                pr.setId_proprie(0);
            }
            pr.setNomeFazenda(TABELA_PROPRIEDADE_RURAL.getValueAt(linha, 1).toString());
            pr.setAreaPropri(TABELA_PROPRIEDADE_RURAL.getValueAt(linha, 2).toString());
            pr.setMuniciSede(TABELA_PROPRIEDADE_RURAL.getValueAt(linha, 3).toString());
            pr.setTempoCompra(TABELA_PROPRIEDADE_RURAL.getValueAt(linha, 4).toString());
            pr.setLogradouro(TABELA_PROPRIEDADE_RURAL.getValueAt(linha, 5).toString());
            pr.setNIRF(TABELA_PROPRIEDADE_RURAL.getValueAt(linha, 6).toString());
            pr.setCodINCRA(TABELA_PROPRIEDADE_RURAL.getValueAt(linha, 7).toString());
            pr.setResidenciaAtual(TABELA_PROPRIEDADE_RURAL.getValueAt(linha, 8).toString());
            pr.setOutrasA(TABELA_PROPRIEDADE_RURAL.getValueAt(linha, 9).toString());

            if (linha < totalLinhasTabela) {
                linha++;
            }
            li++;
            System.out.println("preenchendo objeto pela tabela: " + pr.getNomeFazenda());
        }

        return pr;
    }

    public void altera_dados_JTABLE(int linha) {
        String iid = TABELA_PROPRIEDADE_RURAL.getValueAt(linha, 0).toString();
        if (!"".equals(iid)) {
            id_propriedade_rural = Integer.parseInt(iid);
        } else {
            id_propriedade_rural = 0;
        }
        if ("alterar".equals(status) && id_propriedade_rural > 0) {
            ADICONAR_FAZENDA_.setVisible(false);
        }
        NOMEFAZENDA.setText(TABELA_PROPRIEDADE_RURAL.getValueAt(linha, 1).toString());
        AREAFAZENDA.setText(TABELA_PROPRIEDADE_RURAL.getValueAt(linha, 2).toString());
        MUNICEDE.setText(TABELA_PROPRIEDADE_RURAL.getValueAt(linha, 3).toString());
        TEMPOCOMPRA.setText(TABELA_PROPRIEDADE_RURAL.getValueAt(linha, 4).toString());
        LOGRADOURO.setText(TABELA_PROPRIEDADE_RURAL.getValueAt(linha, 5).toString());
        Numero_NIRF.setText(TABELA_PROPRIEDADE_RURAL.getValueAt(linha, 6).toString());
        CODINCRA.setText(TABELA_PROPRIEDADE_RURAL.getValueAt(linha, 7).toString());
        RESIDEN_ATUAL.setText(TABELA_PROPRIEDADE_RURAL.getValueAt(linha, 8).toString());
        OUTRASATIVI.setText(TABELA_PROPRIEDADE_RURAL.getValueAt(linha, 9).toString());
    }

    public void limparTabela() {
        ((DefaultTableModel) TABELA_PROPRIEDADE_RURAL.getModel()).setRowCount(0); // REMOVE TODOS OS DADOS QUE ESTIVER NA TABELA
    }

    //---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    public Dados_Pessoais preencher_objeto_Pessoal() {
        dadosp = new Dados_Pessoais();
        dadosp.setNome(NOME.getText());
        String dtn = df.format(NASCIMENTO.getDate());
        dadosp.setDataNasci(Util.STRING_DATE(dtn));
        dadosp.setCelular(CELULAR.getText());
        dadosp.setNascionalidade(NASCIONALIDADE.getText());
        dadosp.setEstadoCivil(String.valueOf(ESTADOCIVI.getSelectedItem()));
        dadosp.setCpf(CPF.getText());
        dadosp.setRg(RG.getText());
        String dte = df.format(DATAEXPE.getDate());
        dadosp.setDataExpedicao(Util.STRING_DATE(dte));
        dadosp.setTituloEleito(TITULO_ELEITO.getText());
        if (!"   ".equals(ZONA.getText())) {
            dadosp.setZona(Integer.parseInt(ZONA.getText()));
        }
        if (!"    ".equals(SECAO.getText())) {
            dadosp.setSecao(Integer.parseInt(SECAO.getText()));
        }
        dadosp.setReservista(RESERVISTA.getText());
        dadosp.setCategoria(CATEGORIA.getText());
        dadosp.setPai(PAI.getText());
        dadosp.setMae(MAE.getText());
        dadosp.setExcluido(0);
        if ("alterar".equals(status)) {
            dadosp.setId_sindi(id_sindicalizado);
        }
        return dadosp;
    }

    public void listar_Tabela_Sind() {
        DefaultTableModel dtma = (DefaultTableModel) TABELA_SIND.getModel();
        dtma.setNumRows(0);

        TABELA_SIND.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        DADOSP.listar_Tabela_Dados_Pessoais().forEach((sin) -> {
            String dn = Util.DATE_STRING(sin.getDataNasci());
            String de = Util.DATE_STRING(sin.getDataExpedicao());
            String fone = sin.getCelular();
            if ("(  ) 9     -     ".equals(fone)) {
                fone = "";
            }
            int zo = sin.getZona();
            String zona;
            if (zo == 0) {
                zona = "";
            } else {
                zona = String.valueOf(zo);
            }

            int sec = sin.getSecao();
            String secao;
            if (sec == 0) {
                secao = "";
            } else {
                secao = String.valueOf(sec);
            }

            String inc = sin.getCodINCRA();

            dtma.addRow(new Object[]{
                sin.getId_sindi(),
                sin.getNome(),
                dn,
                fone,
                sin.getNascionalidade(),
                sin.getEstadoCivil(),
                sin.getCpf(),
                sin.getRg(),
                de,
                sin.getTituloEleito(),
                zona,
                secao,
                sin.getReservista(),
                sin.getCategoria(),
                sin.getPai(),
                sin.getMae()
            });
        });

    }

    public int pesquisar_Sind(String nome, String cpf, String rg) {
        int a = 0;
        DefaultTableModel dtma = (DefaultTableModel) TABELA_SIND.getModel();
        dtma.setNumRows(0);

        TABELA_SIND.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        if (!"".equals(nome) && !"   .   .    -   ".equals(cpf) && !"       ".equals(rg)) {
            a = 1;
            DADOSP.pesquisar_nome_cpf_rg(nome, cpf, rg).forEach((sin) -> {
                ID = sin.getId_sindi();
                dtma.addRow(new Object[]{
                    sin.getId_sindi(),
                    sin.getNome(),
                    sin.getDataNasci(),
                    sin.getCelular(),
                    sin.getNascionalidade(),
                    sin.getEstadoCivil(),
                    sin.getCpf(),
                    sin.getRg(),
                    sin.getDataExpedicao(),
                    sin.getTituloEleito(),
                    sin.getZona(),
                    sin.getSecao(),
                    sin.getReservista(),
                    sin.getCategoria(),
                    sin.getPai(),
                    sin.getMae(),});
            });
        } else if (!"".equals(nome)) {
            a = 1;
            if (!"   .   .    -   ".equals(cpf)) {
                DADOSP.pesquisar_nome_cpf(nome, cpf).forEach((sin) -> {
                    ID = sin.getId_sindi();
                    dtma.addRow(new Object[]{
                        sin.getId_sindi(),
                        sin.getNome(),
                        sin.getDataNasci(),
                        sin.getCelular(),
                        sin.getNascionalidade(),
                        sin.getEstadoCivil(),
                        sin.getCpf(),
                        sin.getRg(),
                        sin.getDataExpedicao(),
                        sin.getTituloEleito(),
                        sin.getZona(),
                        sin.getSecao(),
                        sin.getReservista(),
                        sin.getCategoria(),
                        sin.getPai(),
                        sin.getMae(),});
                });
            } else if (!"       ".equals(rg)) {
                DADOSP.pesquisar_nome_rg(nome, rg).forEach((sin) -> {
                    ID = sin.getId_sindi();
                    dtma.addRow(new Object[]{
                        sin.getId_sindi(),
                        sin.getNome(),
                        sin.getDataNasci(),
                        sin.getCelular(),
                        sin.getNascionalidade(),
                        sin.getEstadoCivil(),
                        sin.getCpf(),
                        sin.getRg(),
                        sin.getDataExpedicao(),
                        sin.getTituloEleito(),
                        sin.getZona(),
                        sin.getSecao(),
                        sin.getReservista(),
                        sin.getCategoria(),
                        sin.getPai(),
                        sin.getMae(),});
                });
            } else {
                DADOSP.pesquisar_nome(nome).forEach((sin) -> {
                    ID = sin.getId_sindi();
                    dtma.addRow(new Object[]{
                        sin.getId_sindi(),
                        sin.getNome(),
                        sin.getDataNasci(),
                        sin.getCelular(),
                        sin.getNascionalidade(),
                        sin.getEstadoCivil(),
                        sin.getCpf(),
                        sin.getRg(),
                        sin.getDataExpedicao(),
                        sin.getTituloEleito(),
                        sin.getZona(),
                        sin.getSecao(),
                        sin.getReservista(),
                        sin.getCategoria(),
                        sin.getPai(),
                        sin.getMae(),});
                });
            }
        } else if (!"   .   .    -   ".equals(cpf)) {
            a = 1;
            if (!"       ".equals(rg)) {
                DADOSP.pesquisar_cpf_rg(cpf, rg).forEach((sin) -> {
                    ID = sin.getId_sindi();
                    dtma.addRow(new Object[]{
                        sin.getId_sindi(),
                        sin.getNome(),
                        sin.getDataNasci(),
                        sin.getCelular(),
                        sin.getNascionalidade(),
                        sin.getEstadoCivil(),
                        sin.getCpf(),
                        sin.getRg(),
                        sin.getDataExpedicao(),
                        sin.getTituloEleito(),
                        sin.getZona(),
                        sin.getSecao(),
                        sin.getReservista(),
                        sin.getCategoria(),
                        sin.getPai(),
                        sin.getMae(),});
                });
            } else {
                DADOSP.pesquisar_cpf(cpf).forEach((sin) -> {
                    ID = sin.getId_sindi();
                    dtma.addRow(new Object[]{
                        sin.getId_sindi(),
                        sin.getNome(),
                        sin.getDataNasci(),
                        sin.getCelular(),
                        sin.getNascionalidade(),
                        sin.getEstadoCivil(),
                        sin.getCpf(),
                        sin.getRg(),
                        sin.getDataExpedicao(),
                        sin.getTituloEleito(),
                        sin.getZona(),
                        sin.getSecao(),
                        sin.getReservista(),
                        sin.getCategoria(),
                        sin.getPai(),
                        sin.getMae(),});
                });
            }
        } else if (!"       ".equals(rg)) {
            a = 1;
            DADOSP.pesquisar_rg(rg).forEach((sin) -> {
                ID = sin.getId_sindi();
                dtma.addRow(new Object[]{
                    sin.getId_sindi(),
                    sin.getNome(),
                    sin.getDataNasci(),
                    sin.getCelular(),
                    sin.getNascionalidade(),
                    sin.getEstadoCivil(),
                    sin.getCpf(),
                    sin.getRg(),
                    sin.getDataExpedicao(),
                    sin.getTituloEleito(),
                    sin.getZona(),
                    sin.getSecao(),
                    sin.getReservista(),
                    sin.getCategoria(),
                    sin.getPai(),
                    sin.getMae(),});
            });
        } else if (a == 0) {
            listar_Tabela_Sind();
        }
        return ID;
    }

    public Dados_Pessoais preencer_objeto_dadosP_tabela() {
        se.setId_sindi(Integer.parseInt(TABELA_SIND.getValueAt(TABELA_SIND.getSelectedRow(), 0).toString()));
        id_sindicalizado = se.getId_sindi();
        se.setNome(TABELA_SIND.getValueAt(TABELA_SIND.getSelectedRow(), 1).toString());
        se.setDataNasci(Util.STRING_DATE(TABELA_SIND.getValueAt(TABELA_SIND.getSelectedRow(), 2).toString()));
        se.setCelular(TABELA_SIND.getValueAt(TABELA_SIND.getSelectedRow(), 3).toString());
        se.setNascionalidade(TABELA_SIND.getValueAt(TABELA_SIND.getSelectedRow(), 4).toString());
        se.setEstadoCivil(TABELA_SIND.getValueAt(TABELA_SIND.getSelectedRow(), 5).toString());
        se.setCpf(TABELA_SIND.getValueAt(TABELA_SIND.getSelectedRow(), 6).toString());
        se.setRg(TABELA_SIND.getValueAt(TABELA_SIND.getSelectedRow(), 7).toString());
        se.setDataExpedicao(Util.STRING_DATE(TABELA_SIND.getValueAt(TABELA_SIND.getSelectedRow(), 8).toString()));
        se.setTituloEleito(TABELA_SIND.getValueAt(TABELA_SIND.getSelectedRow(), 9).toString());
        String zo = (TABELA_SIND.getValueAt(TABELA_SIND.getSelectedRow(), 10).toString());
        if ("".equals(zo)) {
            se.setZona(0);
        } else {
            se.setZona(Integer.parseInt(zo));
        }

        String sec = (TABELA_SIND.getValueAt(TABELA_SIND.getSelectedRow(), 11).toString());
        if ("".equals(sec)) {
            se.setSecao(0);
        } else {
            se.setSecao(Integer.parseInt(sec));
        }
        se.setReservista(TABELA_SIND.getValueAt(TABELA_SIND.getSelectedRow(), 12).toString());
        se.setCategoria(TABELA_SIND.getValueAt(TABELA_SIND.getSelectedRow(), 13).toString());
        se.setPai(TABELA_SIND.getValueAt(TABELA_SIND.getSelectedRow(), 14).toString());
        se.setMae(TABELA_SIND.getValueAt(TABELA_SIND.getSelectedRow(), 15).toString());
        return se;
    }

    public void limparCampus_pesquisa() {
        NOME_Pesquisar.setText("");
        RG_Pesquisa.setValue("");
        CPF_Pesquisar.setValue("");
    }

    public void Relatorio(int ID) {
        try {
            HashMap filtro = new HashMap();
            filtro.put("id", ID); // o "id" é o id que criei como parametro la no select do Ireport
            JasperPrint print = JasperFillManager.fillReport("C:\\Users\\helde\\relatorios\\Associado.jasper", filtro, conexao);
            JasperViewer.viewReport(print, false);
        } catch (JRException e) {
            JOptionPane.showMessageDialog(null, "Erro ao gerar relatório");
            System.out.println(e);
        }
    }

    public void preencher_Campus_Pessoais(Dados_Pessoais si) {
        NOME.setText(si.getNome());
        NASCIMENTO.setDate(si.getDataNasci());
        ESTADOCIVI.setSelectedItem(si.getEstadoCivil());
        CPF.setText(si.getCpf());
        CELULAR.setText(si.getCelular());
        RG.setText(si.getRg());
        DATAEXPE.setDate(si.getDataExpedicao());
        NASCIONALIDADE.setText(si.getNascionalidade());
        RESERVISTA.setText(si.getReservista());
        CATEGORIA.setText(si.getCategoria());
        TITULO_ELEITO.setText(si.getTituloEleito());
        if (si.getZona() == 0) {
            ZONA.setText("");
        } else {
            ZONA.setText(String.valueOf(si.getZona()));
        }
        if (si.getSecao() == 0) {
            SECAO.setText("");
        } else {
            SECAO.setText(String.valueOf(si.getSecao()));
        }
        PAI.setText(si.getPai());
        MAE.setText(si.getMae());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ADICONAR_FAZENDA_;
    private javax.swing.JTextField AREAFAZENDA;
    private javax.swing.JLabel BOTAO_AVANCAR_;
    private javax.swing.JButton BOTAO_PESQUISAR_;
    private javax.swing.JLabel BOTAO_REFAZER_;
    private javax.swing.JLabel BOTAO_SALVAR_;
    private javax.swing.JLabel BOTAO_VOLTAR_;
    private javax.swing.JLabel CANCELAR;
    private javax.swing.JTextField CATEGORIA;
    private javax.swing.JFormattedTextField CELULAR;
    private javax.swing.JFormattedTextField CODINCRA;
    private javax.swing.JFormattedTextField CPF;
    private javax.swing.JFormattedTextField CPF_Pesquisar;
    private javax.swing.JPanel DADOS_PESSOAIS_SIND;
    private javax.swing.JPanel DADOS_RURAIS_SIND;
    private com.toedter.calendar.JDateChooser DATAEXPE;
    private javax.swing.JComboBox<String> ESTADOCIVI;
    private javax.swing.JTabbedPane FORM_GUIAS;
    private javax.swing.JTextField LOGRADOURO;
    private javax.swing.JTextField MAE;
    private javax.swing.JTextField MUNICEDE;
    private com.toedter.calendar.JDateChooser NASCIMENTO;
    private javax.swing.JTextField NASCIONALIDADE;
    private javax.swing.JTextField NOME;
    private javax.swing.JTextField NOMEFAZENDA;
    private javax.swing.JTextField NOME_Pesquisar;
    private javax.swing.JFormattedTextField Numero_NIRF;
    private javax.swing.JTextPane OUTRASATIVI;
    private javax.swing.JTextField PAI;
    private javax.swing.JPanel PESQUISAR_SIND;
    private javax.swing.JFormattedTextField RESERVISTA;
    private javax.swing.JTextField RESIDEN_ATUAL;
    private javax.swing.JFormattedTextField RG;
    private javax.swing.JFormattedTextField RG_Pesquisa;
    private javax.swing.JFormattedTextField SECAO;
    private javax.swing.JTable TABELA_PROPRIEDADE_RURAL;
    private javax.swing.JTable TABELA_SIND;
    private javax.swing.JTextField TEMPOCOMPRA;
    private javax.swing.JFormattedTextField TITULO_ELEITO;
    private javax.swing.JLabel TOTAO_REFAZER_P;
    private javax.swing.JLabel VOLTAR1_;
    private javax.swing.JFormattedTextField ZONA;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JLabel jLabel89;
    private javax.swing.JLabel jLabel90;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JLabel jLabel92;
    private javax.swing.JLabel jLabel93;
    private javax.swing.JLabel jLabel94;
    private javax.swing.JLabel jLabel95;
    private javax.swing.JLabel jLabel96;
    private javax.swing.JLabel jLabel97;
    private javax.swing.JLabel jLabel98;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}
